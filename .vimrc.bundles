" This is leoatchina's vim config forked from https://github.com/spf13/spf13-vim
" Sincerely thank him for his great job, and I have made some change according to own requires.
"
"                    __ _ _____              _
"         ___ _ __  / _/ |___ /      __   __(_)_ __ ___
"        / __| '_ \| |_| | |_ \ _____\ \ / /| | '_ ` _ \
"        \__ \ |_) |  _| |___) |_____|\ V / | | | | | | |
"        |___/ .__/|_| |_|____/        \_/  |_|_| |_| |_|
"            |_|
" You can find spf13's origin config  at http://spf13.com

" Identify platform
silent function! OSX()
    return has('macunix')
endfunction
silent function! LINUX()
    return has('unix') && !has('macunix') && !has('win32unix')
endfunction
silent function! WINDOWS()
    return  (has('win32') || has('win64'))
endfunction
" Basics
if !WINDOWS()
    set shell=/bin/sh
    set fileencodings=utf-8,chinese,latin-1,gbk,gb18030,gk2312
else
" Windows Compatible
    " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
    " across (heterogeneous) systems easier.
    set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
    " Be nice and check for multi_byte even if the config requires
    " multi_byte support most of the time
    if has("multi_byte")
        " Windows cmd.exe still uses cp850. If Windows ever moved to
        " Powershell as the primary terminal, this would be utf-8
        set termencoding=cp850
        " Let Vim use utf-8 internally, because many scripts require this
        set encoding=utf-8
        setglobal fileencoding=utf-8
        " Windows has traditionally used cp1252, so it's probably wise to
        " fallback into cp1252 instead of eg. iso-8859-15.
        " Newer Windows files might contain utf-8 or utf-16 LE so we might
        " want to try them first.
        set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
    endif
endif

" Setup Bundle Support
" The next three lines ensure that the ~/.vim/bundle/ system works
filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#rc()

" Add an UnBundle command
function! UnBundle(arg, ...)
    let bundle = vundle#config#init_bundle(a:arg, a:000)
    call filter(g:vundle#bundles, 'v:val["name_spec"] != "' . a:arg . '"')
endfunction
com! -nargs=+   UnBundle
\ call UnBundle(<args>)

" Bundles
Bundle 'gmarik/vundle'
Bundle 'scrooloose/nerdcommenter'
Bundle 'tpope/vim-commentary'
Bundle 'mattn/webapi-vim'
if executable('git')
    Bundle 'tpope/vim-fugitive'
endif
if executable('ctags')
    Bundle 'majutsushi/tagbar'
endif
Bundle 'mhinz/vim-startify'
if executable('ag')
    Bundle 'rking/ag.vim'
    let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
    let g:ag_working_path_mode="r"
    set runtimepath^=~/.vim/bundle/ag.vim"
    nnoremap <leader>fs :Ag<space>
    nnoremap <leader>ff :AgFile<space>
elseif executable('ack-grep')
    let g:ackprg="ack-grep -H --nocolor --nogroup --column"
    Bundle 'mileszs/ack.vim'
    nnoremap <leader>fs :Ack<space>
elseif executable('ack')
    Bundle 'mileszs/ack.vim'
    nnoremap <leader>fs :Ack<space>
endif
" In your .vimrc.local file
" list only the plugin groups you will use
if !exists('g:spf13_bundle_groups')
    let g:spf13_bundle_groups=['smartcomplete', 'python', 'php', 'javascript', 'html','airline']
endif

" General
Bundle 'scrooloose/nerdtree'
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'Xuyuanp/nerdtree-git-plugin'
Bundle 'vim-voom/VOoM'
Bundle 'easymotion/vim-easymotion'
Bundle 'spf13/vim-colors'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
" calor theme
Bundle 'altercation/vim-colors-solarized'
Bundle 'flazz/vim-colorschemes'
" input method
if OSX()
    Bundle 'CodeFalling/fcitx-vim-osx'
else
    Bundle 'lilydjwg/fcitx.vim'
endif
if count(g:spf13_bundle_groups, 'pinyin') || count(g:spf13_bundle_groups, 'wubi')
    Bundle 'leoatchina/ywvim'
endif
Bundle 'rhysd/conflict-marker.vim'
Bundle 'jiangmiao/auto-pairs'
Bundle 'ctrlpvim/ctrlp.vim'
Bundle 'tacahiroy/ctrlp-funky'
Bundle 'godlygeek/tabular'
Bundle 'mbbill/undotree'
Bundle 'bling/vim-bufferline'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'mhinz/vim-signify'
Bundle 'tamlok/vim-markdown'
" align
Bundle 'junegunn/vim-easy-align'
" airline
if count(g:spf13_bundle_groups, 'airline')
    Bundle 'vim-airline/vim-airline'
    Bundle 'vim-airline/vim-airline-themes'
endif
" vimshell
if count(g:spf13_bundle_groups, 'shell') && !has('nvim')
    Bundle 'shougo/vimproc.vim'
    Bundle 'shougo/vimshell.vim'
endif
" PHP
if count(g:spf13_bundle_groups, 'php')
    Bundle 'arnaud-lb/vim-php-namespace'
endif
" Python
if count(g:spf13_bundle_groups, 'python')
    Bundle 'hdima/python-syntax'
    Bundle 'python-mode/python-mode'
endif
" Perl
if count(g:spf13_bundle_groups, 'perl')
    Bundle 'vim-perl/vim-perl'
    Bundle 'perl-support.vim'
endif
" Javascript
if count(g:spf13_bundle_groups, 'javascript')
    Bundle 'elzr/vim-json'
    Bundle 'pangloss/vim-javascript'
    Bundle 'briancollins/vim-jst'
    Bundle 'kchmck/vim-coffee-script'
endif
" Go
if count(g:spf13_bundle_groups, 'go')
    Bundle 'fatih/vim-go'
endif
" Scala
if count(g:spf13_bundle_groups, 'scala')
    Bundle 'derekwyatt/vim-scala'
    Bundle 'derekwyatt/vim-sbt'
    Bundle 'xptemplate'
endif
" HTML
if count(g:spf13_bundle_groups, 'html')
    Bundle 'hail2u/vim-css3-syntax'
    Bundle 'gorodinskiy/vim-coloresque'
    Bundle 'tpope/vim-haml'
    Bundle 'mattn/emmet-vim'
endif


let g:vim_advance = 0
let g:completable=0
if version>703
    " Snippets & AutoComplete
    " use comletable flag to set config
    if count(g:spf13_bundle_groups, 'youcompleteme')
        if executable('cmake')
            let g:completable = 1
            Bundle 'Valloric/YouCompleteMe'
        else
            echom "Inorder to install YCM , you should intall `cmake` first"
        endif
    endif

    if has('nvim') || version>799
        let g:vim_advance = 1
        source ~/.vimrc.advance
    else
        source ~/.vimrc.legacy
    endif

    if g:completable>0
        " use honza's snippets collection"
        Bundle 'honza/vim-snippets'
        if count(g:spf13_bundle_groups,'ultisnips')
            let g:use_ultisnips = 1
            Bundle 'SirVer/ultisnips'
        elseif count(g:spf13_bundle_groups,'neosnippet')
            let g:use_ultisnips = 0
            Bundle 'Shougo/neosnippet'
            Bundle 'Shougo/neosnippet-snippets'
        elseif !has('nvim') && ((executable('python3') && has('python3')) || (executable('python') && has('python')))
            let g:use_ultisnips = 1
            Bundle 'SirVer/ultisnips'
        else
            let g:use_ultisnips = 0
            Bundle 'Shougo/neosnippet'
            Bundle 'Shougo/neosnippet-snippets'
        endif
    endif
endif
