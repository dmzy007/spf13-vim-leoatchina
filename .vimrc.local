set fileencoding=utf-8
set mouse=a
"关闭python的代码检查
let g:pymode_lint_checkers =[]
" 设置快捷键将选中文本块复制至系统剪贴板
vnoremap  <leader>y  "+y
nnoremap  <leader>Y  "+yg_
nnoremap  <leader>y  "+y
nnoremap  <leader>yy  "+yy

nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P
"屏蔽F1
inoremap <F1> <Esc>
noremap <F1> <Esc>
"F2打开，关闭代码折叠
nnoremap <F2> :set nofoldenable! nofoldenable?<CR>
"F3打开/关闭分行
nnoremap <F3> :set nowrap! nowrap?<CR>
" F4作为打开，关闭搜索结果高亮
nnoremap <F4> :set hlsearch! hlsearch?<CR>
"关闭代码折叠
set nofoldenable
"让配置变更立即生效
autocmd! bufwritepost .vimrc.local source %
"让NERDTree的侧边栏不消失
if isdirectory(expand("~/.vim/bundle/nerdtree"))
    let NERDTreeWinPos=0
    let NERDTreeQuitOnOpen = 1
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif
    nnoremap <C-Y> :NERDTreeFocusToggle<CR>
endif
" nerdtree-git
if isdirectory(expand("~/.vim/bundle/nerdtree-git-plugin"))
    let g:NERDTreeIndicatorMapCustom = {
            \ "Modified"  : "*",
            \ "Staged"    : "+",
            \ "Untracked" : "★",
            \ "Renamed"   : "→ ",
            \ "Unmerged"  : "=",
            \ "Deleted"   : "X",
            \ "Dirty"     : "●",
            \ "Clean"     : "√",
            \ "Unknown"   : "?"
    \ }
endif
"youcomplteme 设置

if count(g:spf13_bundle_groups, 'youcompleteme')
    set completeopt=longest,menu    "让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
    autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口
    "回车就选中当前项 
    inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
    "上下左右键的行为 会显示其他信息
    inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
    inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
    inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" :"\<PageDown>"
    inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

    "youcompleteme  默认tab  s-tab 和自动补全冲突
    ""let g:ycm_key_list_select_completion=['<c-n>']
    let g:ycm_key_list_select_completion = ['<Down>']
    "let g:ycm_key_list_previous_completion=['<c-p>']
    let g:ycm_key_list_previous_completion = ['<Up>']
    let g:ycm_confirm_extra_conf=1 "加载.ycm_extra_conf.py提示
    let g:ycm_global_ycm_extra_conf = '~/ycm_extra_conf.py' "这个是默认ycm配置文件所在目录
    "
    "let g:ycm_collect_identifiers_from_tags_files=1    " 开启 YCM
    "基于标签引擎
    "let g:ycm_min_num_of_chars_for_completion=2    "
    "从第2个键入字符就开始罗列匹配项
    let g:ycm_cache_omnifunc=0 " 禁止缓存匹配项,每次都重新生成匹配项
    let g:ycm_seed_identifiers_with_syntax=1   " 语法关键字补全
    "syntastic
    "nnoremap <leader>lo :lopen<CR>    "open locationlist
    "nnoremap <leader>lc :lclose<CR>    "close locationlist
    "inoremap <leader><leader> <C-x><C-o>
    ""在注释输入中也能补全
    let g:ycm_complete_in_comments = 1
    "在字符串输入中也能补全
    let g:ycm_complete_in_strings = 1
    "注释和字符串中的文字也会被收入补全
    let g:ycm_collect_identifiers_from_comments_and_strings = 0
    " 跳转到定义处
    nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
endif
    ""
"语法检测等
filetype plugin indent on

if isdirectory(expand("~/.vim/bundle/nerdcommenter"))
    inoremap <C-CR><C-o>:call NERDComment(0,"toggle")<C-m>
    noremap <C-CR> :call NERDComment(0,"toggle")<CR>
endif
" 关闭拼写检查
set nospell
" 关闭声音
nnoremap <Leader>J <C-W>J
set noeb
set vb
" Ctags
set tags=tags;
set autochdir
" 关闭行列光标加亮
set nocursorcolumn
set cursorline
" 允许折行
set wrap
" 定义快捷键的前缀，即 <Leader>忣
let mapleader=";"
" 开启文件类型侦测
filetype on
" 根据侦测到的不同类型:加载对应的插件
filetype plugin on

"用tab来控制缩进
nnoremap <tab> V><ESC>
nnoremap <s-tab> V<<ESC>
vnoremap <tab> >gv
vnoremap <s-tab> <gv
" 定义快捷键到行首和行尾
nnoremap - ^
nnoremap _ k^
nnoremap + j^
nnoremap = $

" 定义快捷键关闭当前窗口
nmap <Leader>q :q<CR>
" 标签控制
set showtabline=2
nnoremap <Leader>tn :tabnew<CR>
nnoremap <Leader>tc :tabc<CR>
nnoremap <Leader>ta :tabs<CR>
nnoremap <Leader>ts :tab split<CR>
nnoremap <Leader>te :tabe<SPACE>
nnoremap <Leader>tf :tabfirst<CR>
nnoremap <Leader>tl :tablast<CR>
nnoremap <Leader>tm :tabm<SPACE>
nnoremap <Leader>td :tabdo

" 定义快捷键保存当前窗口内容
nmap <Leader>w :w<CR>
" 定义快捷键保存所有窗口内容并退出 vim
nmap <Leader>WQ :wa<CR>:q<CR>
" 不做任何保存，直接退出 vim
nmap <Leader>Q :qa!<CR>
" 设置分割页面
nmap <Leader>- :split<CR>
nmap <leader>\ :vsplit<CR>
"设置垂直高度减增
nmap <Leader>, :resize -3<CR>
nmap <Leader>. :resize +3<CR>
"设置水平宽度减增
nmap <Leader>[ :vertical resize -3<CR>
nmap <Leader>] :vertical resize +3<CR>
"设置成同样的大小
nmap <leader>= <C-W>=
"至左方的子窗口
nnoremap <Leader>h <C-W>h
nnoremap <Leader>H <C-W>H
nnoremap <C-LEFT> <C-W>h
nnoremap <C-S-LEFT> <C-W>H
"至右方的子窗口
nnoremap <Leader>l <C-W>l
nnoremap <Leader>L <C-W>L
nnoremap <C-RIGHT> <C-W>l
nnoremap <C-S-RIGHT> <C-W>L
"至上方的子窗口
nnoremap <Leader>k <C-W>k
nnoremap <Leader>>K <C-W>K
nnoremap <C-UP> <C-W>k
nnoremap <C-S-UP> <C-W>K
"至下方的子窗口
nnoremap <Leader>j <C-W>j
nnoremap <Leader>J <C-W>J
nnoremap <C-DOWN>  <C-W>j
nnoremap <C-S-DOWN> <C-W>J
" 定义快捷键在结对符之间跳转
nmap <Leader>M %
" 开启实时搜索功能
set incsearch
" 搜索时大小写不敏感
set ignorecase
" 显示光标当前位置
set ruler
" 开启行号显示
set number
" 高亮显示搜索结果
set hlsearch
" 标签列表
" 设置 tagbar 子窗口的位置出现在主编辑区的左边
let tagbar_left=0
" 设置显示／隐藏标签列表子窗口的快捷键。速记：identifier list by tag
nnoremap <Leader>ilt :TagbarToggle<CR>
" 设置标签子窗口的宽度
let tagbar_width=32
" tagbar 子窗口中不显示冗余帮助信息
let g:tagbar_compact=1
" 设置 ctags 对哪些代码标识符生成标签
let g:tagbar_type_cpp = {
     \ 'ctagstype' : 'c++',
     \ 'kinds'     : [
         \ 'c:classes:0:1',
         \ 'd:macros:0:1',
         \ 'e:enumerators:0:0',
         \ 'f:functions:0:1',
         \ 'g:enumeration:0:1',
         \ 'l:local:0:1',
         \ 'm:members:0:1',
         \ 'n:namespaces:0:1',
         \ 'p:functions_prototypes:0:1',
         \ 's:structs:0:1',
         \ 't:typedefs:0:1',
         \ 'u:unions:0:1',
         \ 'v:global:0:1',
         \ 'x:external:0:1'
     \ ],
 \ 'sro'        : '::',
 \ 'kind2scope' : {
     \ 'g' : 'enum',
     \ 'n' : 'namespace',
     \ 'c' : 'class',
     \ 's' : 'struct',
     \ 'u' : 'union'
 \ },
 \ 'scope2kind' : {
     \ 'enum'      : 'g',
     \ 'namespace' : 'n',
     \ 'class'     : 'c',
     \ 'struct'    : 's',
     \ 'union'     : 'u'
 \ }
\ }

au BufNewFile,BufRead *.py
    \set tabstop = 4
    \set softtabstop=4
    \set shiftwidth=4
    \set expandtab
    \set autoindent
    \set fileformat=unix
    \set foldenable
    \set foldmethod=indent
au BufRead *.py map <buffer><F5> :w<CR>:!python %<CR>
au BufRead *.pl map <buffer><F5> :w<CR>:!perl %<CR>
au BufRead *.sh map <buffer><F5> :w<CR>:!bash %<CR>
au BufNewFile,BufRead *.js, *.html, *.css
    \ set tabstop=2
    \ set softtabstop=2
    \ set shiftwidth=2
" 开启主题
colorscheme solarized
set guifont=YaHei\ Consolas\ Hybrid
let g:Powerline_colorscheme='solarized256'
" 禁止闪烁
set gcr=a:block-blinkon0
" 显示滚动条
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R
" 菜单和工具条
set guioptions+=m
set guioptions-=T
" 总是显示状态栏
set laststatus=2
